<script src="/js/Chart.js"></script>
<script src="/js/jquery-1.11.0.min.js"></script>

<%
	#generate dataset on server side
	graph_array = []
	graph_array2 = []

	num_hops = @hops.select('DISTINCT hop_number').count
	(0..num_hops-1).each do |n|
		graph_array[n] = @hops.select('CAST(packet_loss) AS UNSIGNED, created_at').where(hop_number:n+1).order('id DESC').limit(4500).group("date_format(created_at, '%Y-%m-%d %H')").average('packet_loss')	
	end

	(0..num_hops-1).each do |n|
		graph_array2[n] = @hops.select('avg_packet_latency, created_at').where(hop_number:n+1).order('id DESC').limit(4500).group("date_format(created_at, '%Y-%m-%d %H')").average('avg_packet_latency')	
	end

%>

<canvas id="chart1" height="700" width="1000"></canvas>

<canvas id="chart2" height="700" width="1000"></canvas>

<script type="text/javascript">	
	
	$(function() {
		window.MG = {}; //namespace

		//link dataset to client (javascript)
		var graph_array = <%=graph_array.to_json %>
		var graph_array2 = <%=graph_array2.to_json %>

		var xaxis_data, yaxis_data, red_colour,rgba;
		var yaxis_datasets = [];
		
		console.log(graph_array);

		for (var i=0;i < graph_array.length; i++) {
		  
		  	xaxis_data = [];
		  	yaxis_data = [];
		  	
		  	for (key in graph_array[i]) {
				xaxis_data.push(key);
		  	 	yaxis_data.push(parseFloat(graph_array[i][key]));
		  	}	

	  		console.log(xaxis_data);
	  		console.log(yaxis_data);
		
			//data for this line, set different colour for each line
			red_colour+=i*50
			rgba = "rgba(200,220,220,0.5)";
			rgba_fill = "rgba(220,220,220,0)";
			rgba_stroke = "rgba(220,220,220,1.0)"
			
			if (i==0 || i==1 || i==2) {
				rgba_stroke = "rgba(240,7,94,1.0)"
			}
			
			if (i==graph_array.length-1) {
				rgba_stroke = "rgba(11,181,70,1.0)"
			}

			yaxis_datasets[i] = {
				fillColor : rgba_fill,
				strokeColor : rgba_stroke,
				pointColor : rgba,
				pointStrokeColor : "#fff",
				data : yaxis_data
			}
		}
	
		var data = {
			labels : xaxis_data, //use the last line's xaxis data, all lines are the same
			datasets : yaxis_datasets 
		};

		yaxis_datasets = [];
		
		for (var i=0;i < graph_array2.length; i++) {
		  
		  	xaxis_data = [];
		  	yaxis_data = [];
		  	
		  	for (key in graph_array2[i]) {
				xaxis_data.push(key);
		  	 	yaxis_data.push(parseFloat(graph_array2[i][key]));
		  	}	

			//data for this line, set different colour for each line
			red_colour+=i*50
			rgba = "rgba(200,220,220,0.5)";
			rgba_fill = "rgba(220,220,220,0)";
			rgba_stroke = "rgba(36,8,76,1.0)"
			yaxis_datasets[i] = {
				fillColor : rgba_fill,
				strokeColor : rgba_stroke,
				pointColor : rgba,
				pointStrokeColor : "#fff",
				data : yaxis_data
			}
		}
	
		var data2 = {
			labels : xaxis_data, //use the last line's xaxis data, all lines are the same
			datasets : yaxis_datasets 
		};

		var options = {
				
			//Boolean - If we show the scale above the chart data			
			scaleOverlay : false,
			
			//Boolean - If we want to override with a hard coded scale
			scaleOverride : false,
			
			//** Required if scaleOverride is true **
			//Number - The number of steps in a hard coded scale
			scaleSteps : null,
			//Number - The value jump in the hard coded scale
			scaleStepWidth : null,
			//Number - The scale starting value
			scaleStartValue : null,

			//String - Colour of the scale line	
			scaleLineColor : "rgba(0,0,0,.1)",
			
			//Number - Pixel width of the scale line	
			scaleLineWidth : 1,

			//Boolean - Whether to show labels on the scale	
			scaleShowLabels : true,
			
			
			//String - Scale label font declaration for the scale label
			scaleFontFamily : "'Arial'",
			
			//Number - Scale label font size in pixels	
			scaleFontSize : 12,
			
			//String - Scale label font weight style	
			scaleFontStyle : "normal",
			
			//String - Scale label font colour	
			scaleFontColor : "#000",	
			
			///Boolean - Whether grid lines are shown across the chart
			scaleShowGridLines : true,
			
			//String - Colour of the grid lines
			scaleGridLineColor : "rgba(0,0,0,.05)",
			
			//Number - Width of the grid lines
			scaleGridLineWidth : 1,	
			
			//Boolean - Whether the line is curved between points
			bezierCurve : true,
			
			//Boolean - Whether to show a dot for each point
			pointDot : true,
			
			//Number - Radius of each point dot in pixels
			pointDotRadius : 3,
			
			//Number - Pixel width of point dot stroke
			pointDotStrokeWidth : 1,
			
			//Boolean - Whether to show a stroke for datasets
			datasetStroke : true,
			
			//Number - Pixel width of dataset stroke
			datasetStrokeWidth : 2,
			
			//Boolean - Whether to fill the dataset with a colour
			datasetFill : true,
			
			//Boolean - Whether to animate the chart
			animation : true,

			//Number - Number of animation steps
			animationSteps : 60,
			
			//String - Animation easing effect
			animationEasing : "easeOutQuart",

			//Function - Fires when the animation is complete
			onAnimationComplete : null
		
		};

		var ctx = document.getElementById("chart1").getContext("2d");
		var chart = new Chart(ctx).Line(data,options);

		var ctx2 = document.getElementById("chart2").getContext("2d");
		var chart2 = new Chart(ctx2).Line(data2,options);

	});

</script>


